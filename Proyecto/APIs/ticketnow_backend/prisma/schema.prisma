generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["event_management", "user_management"]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model event_schedules {
  schedule_id   Int      @id @default(autoincrement())
  event_id      Int?
  schedule_date DateTime @db.Timestamptz(6)
  start_time    DateTime @db.Time(6)
  end_time      DateTime @db.Time(6)
  description   String?  @db.VarChar(255)
  is_main_event Boolean? @default(false)
  events        events?  @relation(fields: [event_id], references: [event_id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("event_management")
}

model event_types {
  event_type_id Int      @id @default(autoincrement())
  type_name     String   @db.VarChar(100)
  description   String?
  is_active     Boolean? @default(true)
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  updated_at    DateTime @default(now()) @db.Timestamptz(6)
  events        events[]

  @@schema("event_management")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model events {
  event_id            Int                   @id @default(autoincrement())
  event_name          String                @db.VarChar(255)
  description         String?
  short_description   String?               @db.VarChar(500)
  event_type_id       Int?
  start_datetime      DateTime              @db.Timestamptz(6)
  end_datetime        DateTime              @db.Timestamptz(6)
  capacity            Int
  base_price          Decimal?              @default(0.00) @db.Decimal(10, 2)
  is_active           Boolean?              @default(true)
  created_at          DateTime              @default(now()) @db.Timestamptz(6)
  updated_at          DateTime              @default(now()) @db.Timestamptz(6)
  image               String?               @db.VarChar(255)
  event_schedules     event_schedules[]
  event_types         event_types?          @relation(fields: [event_type_id], references: [event_type_id], onDelete: NoAction, onUpdate: NoAction)
  ticket_reservations ticket_reservations[]

  @@schema("event_management")
}

model ticket_reservations {
  reservation_id Int      @id @default(autoincrement())
  user_id        Int?
  event_id       Int?
  quantity       Int
  total_price    Decimal  @db.Decimal(10, 2)
  reserved_at    DateTime @default(now()) @db.Timestamptz(6)
  guest_email    String?  @db.VarChar(255)
  guest_name     String?  @db.VarChar(100)
  guest_phone    String?  @db.VarChar(20)
  events         events?  @relation(fields: [event_id], references: [event_id], onDelete: Cascade, onUpdate: NoAction)
  users          users?   @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("event_management")
}

model users {
  user_id             Int                   @id @default(autoincrement())
  username            String?               @db.VarChar(50)
  email               String                @unique @db.VarChar(255)
  phone               String?               @db.VarChar(20)
  password            String                @db.VarChar(255)
  status              Boolean?              @default(true)
  created_at          DateTime              @default(now()) @db.Timestamptz(6)
  updated_at          DateTime              @default(now()) @db.Timestamptz(6)
  ticket_reservations ticket_reservations[]

  @@schema("user_management")
}
